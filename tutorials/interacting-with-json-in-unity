+++
date = "2017-06-10T13:27:39-03:00"
title = "Interacting with JSON in Unity"
draft = true
categories = ["unity","json","tutorial"]
author = "Joel Kuntz"

+++

Sometimes we find the need to work with JSON data. Whether its communicating with a web server, loading data, or exporting data. For a long time in Unity you either had to write your own parser/serializer or get a third party plugin. Semi-recently they introduced the JsonUtility class in the UnityEngine namespace. It won't solve all of your problems, but it is a great tool to use built into the engine. This tutorial will focus around the data found on https://jsonplaceholder.typicode.com this allows us to use a live server and have a real world use case. If this server ever goes down you can use the [backup data](https://github.com/Sacred-Seed-Studio/tutorials/tree/master/interacting-with-json-in-unity/Assets/Data). This is by no means a tutorial about web request best practices in unity, but simply used as a real world use case to demonstrate handling JSON.

<!--more-->

<p class="note">This is a git friendly tutorial. You can follow the steps by clicking the commit link in the header. You can see the [completed project here](https://github.com/Sacred-Seed-Studio/tutorials/tree/master/interacting-with-json-in-unity)</p>

## Setup

### Unity [a545ebe](https://github.com/Sacred-Seed-Studio/tutorials/commit/a545ebe0aa3c840e5f1df5253eaa0eae93187d6c)

Setup a new unity project or open an existing.

### Data Structures [c1e22b3](https://github.com/Sacred-Seed-Studio/tutorials/commit/c1e22b33ae55feea013457a572f4264bcc72e76c)

To start we will create two data structures to match a Post and User. You can check out their json response at the urls below
https://jsonplaceholder.typicode.com/users/1
https://jsonplaceholder.typicode.com/posts/1

We create structs for simplicity, but this could also be a class with a constructor and ToString override.

```c#
// Assets/DataStructures/Post.cs
[System.Serializable]
public struct Post
{
    public int userId;
    public int id;
    public string title;
    public string body;
}

// Assets/DataStructures/User.cs
[System.Serializable]
public struct GeoCoords
{
    public float lat;
    public float lng;
} 

[System.Serializable]
public struct Address
{
    public string street;
    public string suite;
    public string city;
    public string zipcode;
    public GeoCoords geo;
}

[System.Serializable]
public struct Company
{
    public string name;
    public string catchPhrase;
    public string bs;
}

[System.Serializable]
public class User {
    public int id;
    public string name;
    public string email;
    public Address address;
    public string phone;
    public string website;
    public Company company;
}
```

### API [f7a01a2](https://github.com/Sacred-Seed-Studio/tutorials/commit/f7a01a275a5666744b5754b525bed8a3634190a4)

We will also create an API class that we will use to store the base url of the server. This will help prevent typos and other weird bugs in our code.

```c#
// Assets/API/API.cs
public class API {
    public static string baseURL = "https://jsonplaceholder.typicode.com";
}
```

## Simple Example [019ba2f](https://github.com/Sacred-Seed-Studio/tutorials/commit/019ba2fdb8a289dc88bf678110d63ee452da241f)

In this first part we will make a new C# MonoBehaviour and attach it to an empty game object.
This script will make a GET request to fetch a post and a user. We use the following 
- [WWW](https://docs.unity3d.com/ScriptReference/WWW.html)
- [JsonUtility](https://docs.unity3d.com/ScriptReference/JsonUtility.html)
- [Coroutines](https://docs.unity3d.com/Manual/Coroutines.html)

```c#
// Assets/SimpleExample/SimpleExample.cs
using System.Collections;
using UnityEngine;

public class SimpleExample : MonoBehaviour
{
    public User user;
    public Post post;

    void Start()
    {
        StartCoroutine(LoadPost());
        StartCoroutine(LoadUser());
    }

    IEnumerator LoadPost()
    {
        WWW www = new WWW(API.baseURL + "/posts/1");
        yield return www;
        post = JsonUtility.FromJson<Post>(www.text);
        Debug.Log("Post: " + www.text);
    }

    IEnumerator LoadUser()
    {
        WWW www = new WWW(API.baseURL + "/users/1");
        yield return www;
        user = JsonUtility.FromJson<User>(www.text);
        Debug.Log("User: " + www.text);
    }
}
```

<img alt="HTML viewer" src="/images/tutorials/interacting-with-json/SimpleExample.png">

We fire off two Coroutines in Unitys Start method and can see the new data appear in the inspector upon the web request completion. Pretty neat, and refreshingly simple. You could use `JsonUtility` Synchronously with any string in place of www.text as well.

## Handling Arrays [44a5c7e](https://github.com/Sacred-Seed-Studio/tutorials/commit/44a5c7efd617c835f2d07c5b233132c4d43b79b2)

In this second part we will learn how to deal with a JSON array. The astute Googler will have realized that `JsonUtility` doesnt support a top level json array. We can however work around this pretty reasonably. We create a new class `JsonHelper` which will provide a static generic function that returns an array. This works by wrapping our json array in an object and using a new private generic class `JsonArrayWrapper` to handle this wrapped array. This is based off of [a post on the unity forums](https://forum.unity3d.com/threads/how-to-load-an-array-with-jsonutility.375735/#post-2585129).

<img alt="HTML viewer" src="/images/tutorials/interacting-with-json/HandlingArrays.png">

```c#
// Assets/HandlingArrays/JsonHelper.cs
using UnityEngine;

public class JsonHelper
{
    public static T[] getJsonArray<T>(string json)
    {
        string newJson = "{ \"array\": " + json + "}";
        JSONArrayWrapper<T> wrapper = JsonUtility.FromJson<JSONArrayWrapper<T>>(newJson);
        return wrapper.array;
    }

    [System.Serializable]
    private class JSONArrayWrapper<T>
    {
        public T[] array;
    }
}
```

Actual usage is quite similar to JsonUtility:

```c#
// Assets/HandlingArrays/HandlingArrays.cs
using UnityEngine;
using System.Collections;

public class HandlingArrays : MonoBehaviour 
{
    public User[] users;

    void Start()
    {
        StartCoroutine(LoadUsers());
    }

    IEnumerator LoadUsers()
    {
        WWW www = new WWW(API.baseURL + "/users");
        yield return www;
        users = JsonHelper.getJsonArray<User>(www.text);
        Debug.Log("Users: " + www.text);
    }
}
```

## Exporting Data [e98b737](https://github.com/Sacred-Seed-Studio/tutorials/commit/e98b737b053ec4a16ee61cd4eee97d87359adab0)
To wrap this up we will showcase how you can turn your data into JSON. We will make a POST request to the server simulating creation of a post. This part will obviously vary depending on the format your server expects. We proceed by sending https://jsonplaceholder.typicode.com/posts a byte array containing the JSON version of our struct. We must let the server know we are sending it JSON via the Content-Type header with the json mime type. When the request finishes we can see in the inspector the id changes

```c#
// Assets/ExportingData/ExportingData.cs
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Text;

public class ExportingData : MonoBehaviour
{
    public Post post;

    void Start()
    {
        StartCoroutine(CreatePost());
    }

    IEnumerator CreatePost()
    {
        Dictionary<string, string> headers = new Dictionary<string, string>();
        headers.Add("Content-Type", "application/json");

        byte[] postData = Encoding.ASCII.GetBytes(JsonUtility.ToJson(post));

        WWW www = new WWW(API.baseURL + "/posts", postData, headers);

        yield return www;

        Debug.Log("Created a Post: " + www.text);
        post = JsonUtility.FromJson<Post>(www.text);
    }
}
```

<img alt="HTML viewer" src="/images/tutorials/interacting-with-json/ExportingData.png">